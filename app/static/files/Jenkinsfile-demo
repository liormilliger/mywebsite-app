pipeline {
  agent any

  environment {
    AWS_REGION = "us-east-1"
    ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com"
    ECR_REPOSITORY = "mywebsite"
    IMAGE_FILE_NAME = "my-app-image.tar"
    BRANCH_NAME = "${env.GIT_BRANCH?.replaceAll(/[^a-zA-Z0-9]/, '-')}"
    IMAGE_TAG = "1.${env.BUILD_NUMBER}-${BRANCH_NAME}"
  }

  stages {

    // ===========================================================
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    // ===========================================================
    stage('Build Image') {
      steps {
        script {
          sh """
            echo "Building Docker image..."
            docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
            docker save ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} -o ${IMAGE_FILE_NAME}
          """
          archiveArtifacts artifacts: "${IMAGE_FILE_NAME}", fingerprint: true
        }
      }
    }

    // ===========================================================
    stage('Integration Test - Database') {
      when {
        expression {
          return env.BRANCH_NAME == "database" || 
                 (env.GIT_COMMIT && sh(script: "git log -1 --pretty=%B | grep -E 'db|database' || true", returnStatus: true) == 0)
        }
      }
      steps {
        script {
          sh """
            echo "Running Database Integration Tests..."
            curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            docker load -i ${IMAGE_FILE_NAME}
            docker-compose -f docker-compose.ci.yaml -p ci up -d
            echo "Waiting for services..."
            sleep 15
            docker run --rm --network=ci_default \
              -v \$(pwd)/test_db.py:/test_db.py \
              -e POSTGRES_HOST=db \
              -e POSTGRES_DB=mywebsite \
              -e POSTGRES_USER=admin \
              -e POSTGRES_PASSWORD=password \
              --entrypoint="" python:3.9-slim \
              sh -c "pip install psycopg2-binary requests && python -u /test_db.py"
          """
        }
      }
      post {
        always {
          sh "docker-compose -f docker-compose.ci.yaml -p ci down || true"
        }
      }
    }

    // ===========================================================
    stage('Integration Test - App Only') {
      when {
        expression {
          return !(env.BRANCH_NAME == "database" || 
                   (env.GIT_COMMIT && sh(script: "git log -1 --pretty=%B | grep -E 'db|database' || true", returnStatus: true) == 0))
        }
      }
      steps {
        script {
          sh """
            echo "Running application-only tests..."
            echo "Application test placeholder successful!"
          """
        }
      }
    }

    // ===========================================================
    stage('Security Scan') {
      steps {
        script {
          sh """
            echo "Running Gitleaks scan..."
            docker run --rm -v \$(pwd):/repo zricethezav/gitleaks:latest detect --source=/repo --no-git -v || true

            echo "Running Trivy scan..."
            docker run --rm -v \$(pwd):/work -v /var/run/docker.sock:/var/run/docker.sock \
              aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL \
              ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} || true
          """
        }
      }
    }

    // ===========================================================
    stage('Push to ECR') {
      when {
        expression { return !sh(script: "git log -1 --pretty=%B | grep 'skip' || true", returnStatus: true) == 0 }
      }
      steps {
        script {
          withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-jenkins-creds']
          ]) {
            sh """
              echo "Logging into Amazon ECR..."
              aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
              docker load -i ${IMAGE_FILE_NAME}
              docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
            """
          }
        }
      }
    }

    // ===========================================================
    stage('Update Kubernetes Manifest Repo') {
      steps {
        script {
          sshagent(['github-pat']) {
            sh """
              echo "Cloning Kubernetes manifest repo..."
              git clone --branch ${BRANCH_NAME} https://github.com/liormilliger/mywebsite-k8s.git
              cd mywebsite-k8s
              wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
              chmod +x /usr/bin/yq
              yq eval '.image.tag = "${IMAGE_TAG}"' -i my-app-chart/values.yaml
              git config user.name "Jenkins"
              git config user.email "jenkins@local"
              git commit -am "Update image tag for mywebsite to ${IMAGE_TAG}" || echo "No changes"
              git push
            """
          }
        }
      }
    }
  }

  post {
    always {
      echo "Pipeline completed for branch: ${BRANCH_NAME}"
    }
  }
}
