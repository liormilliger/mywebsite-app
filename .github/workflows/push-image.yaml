name: Build, Test, and Push Docker Image to ECR

on:
  push:
    # This workflow will now run on both main and database branches
    branches: [ "main", "database" ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: mywebsite
  IMAGE_FILE_NAME: my-app-image.tar

jobs:
  # ===============================================
  # Job 1: Build Docker Image and Create Version Tag
  # ===============================================
  build:
    name: Build and Tag Image
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ignore')"
    outputs:
      image_tag: ${{ steps.version.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define Image Version Tag
        id: version
        run: |
          # Create a dynamic version tag based on the branch and run number
          BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')
          VERSION="1.${{ github.run_number }}-${BRANCH_NAME}"
          echo "IMAGE_TAG=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.IMAGE_TAG }} .

      - name: Save Docker image for subsequent jobs
        run: docker save ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.IMAGE_TAG }} --output ${{ env.IMAGE_FILE_NAME }}

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ env.IMAGE_FILE_NAME }}

  # ===============================================
  # Job 2: Run Integration Tests with Docker Compose
  # This job now includes all the database checks.
  # ===============================================
  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: build # Depends only on the build job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image from artifact
        run: docker load --input ${{ env.IMAGE_FILE_NAME }}

      - name: Start services using Docker Compose
        env:
          # This variable will be picked up by docker-compose.ci.yaml
          WEB_IMAGE: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.build.outputs.image_tag }}
        run: docker-compose -f docker-compose.ci.yaml -p ci up -d

      - name: Wait for services to be fully up
        run: echo "Waiting for services to initialize..." && sleep 20

      - name: Execute Database Test Script
        run: |
          # The network name 'ci_default' is created by using '-p ci' with docker-compose
          docker run --rm --network=ci_default \
            -v $(pwd)/test_db.py:/test_db.py \
            -e POSTGRES_HOST=db \
            -e POSTGRES_DB=mywebsite \
            -e POSTGRES_USER=admin \
            -e POSTGRES_PASSWORD=password \
            --entrypoint="" \
            python:3.9-slim \
            sh -c "pip install psycopg2-binary requests && python -u /test_db.py"

      - name: Stop services after test
        if: always() # This step runs even if the tests fail
        run: docker-compose -f docker-compose.ci.yaml -p ci down

  # ===============================================
  # Job 3: Push Image to ECR (runs in parallel with tests)
  # ===============================================
  push-to-ecr:
    name: Push Image to ECR
    runs-on: ubuntu-latest
    needs: build # Depends only on the build job
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/database'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image from artifact
        run: docker load --input ${{ env.IMAGE_FILE_NAME }}

      - name: Tag and Push image to Amazon ECR
        run: |
          IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
          # Also tag with 'latest' if on the main branch for easy reference
          if [ "${{ github.ref_name }}" == "main" ]; then
            docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          fi
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }} --all-tags

  # ===============================================
  # Job 4: Update K8s Repo (GitOps Trigger)
  # ===============================================
  update-kubernetes-repo:
    name: Update Kubernetes Manifest
    runs-on: ubuntu-latest
    needs: [integration-test, push-to-ecr]
    if: github.ref == 'refs/heads/database'
    steps:
      - name: Checkout Kubernetes repo
        uses: actions/checkout@v4
        with:
          repository: liormilliger/mywebsite-k8s
          token: ${{ secrets.GH_PAT }}
          ref: database

      - name: Install yq for YAML processing
        run: sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

      - name: Update image tag in values.yaml
        run: |
          IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
          # Ensure you have a values.yaml file with this structure
          yq eval '.image.tag = "'"$IMAGE_TAG"'"' -i 'my-app-chart/values.yaml'

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git commit -am "Update image tag for mywebsite to ${{ needs.build.outputs.image_tag }}"
          git push

