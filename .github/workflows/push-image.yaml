# .github/workflows/ci.yaml

name: Build, Test, and Push Docker Image to ECR

on:
  push:
    branches: [ "main", "database" ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: mywebsite
  IMAGE_FILE_NAME: my-app-image.tar

jobs:
  # ===============================================
  # Job 1: Build the Docker Image (No changes)
  # ===============================================
  build:
    name: Build Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.version.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define Image Version Tag
        id: version
        run: |
          BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')
          VERSION="1.${{ github.run_number }}-${BRANCH_NAME}"
          echo "IMAGE_TAG=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.IMAGE_TAG }} .

      - name: Save Docker image as an artifact
        run: docker save ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.IMAGE_TAG }} --output ${{ env.IMAGE_FILE_NAME }}

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ env.IMAGE_FILE_NAME }}

  # ===============================================
  # Job 2A: Run Integration Tests (Database)
  # ===============================================
  integration-test-db:
    name: Run Database Integration Tests
    runs-on: ubuntu-latest
    needs: build
    # Only run this job for pushes to the 'database' branch OR if a commit message contains 'db' or 'database'
    if: github.ref_name == 'database' || contains(toJSON(github.event.commits.*.message), 'db') || contains(toJSON(github.event.commits.*.message), 'database')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose (Optimized)
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load --input ${{ env.IMAGE_FILE_NAME }}

      - name: Start services using Docker Compose
        env:
          WEB_IMAGE: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.build.outputs.image_tag }}
        run: docker-compose -f docker-compose.ci.yaml -p ci up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for containers to become healthy..."
          sleep 15

      - name: Execute Database Test Script
        run: |
          docker run --rm --network=ci_default \
            -v $(pwd)/test_db.py:/test_db.py \
            -e POSTGRES_HOST=db \
            -e POSTGRES_DB=mywebsite \
            -e POSTGRES_USER=admin \
            -e POSTGRES_PASSWORD=password \
            --entrypoint="" \
            python:3.9-slim \
            sh -c "pip install psycopg2-binary requests && python -u /test_db.py"

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.ci.yaml -p ci down

  # ===============================================
  # Job 2B: Run Integration Tests (Application Only)
  # ===============================================
  integration-test-app:
    name: Run Application Tests
    runs-on: ubuntu-latest
    needs: build
    # Run this job for all other cases where the DB test is not run
    if: "!(github.ref_name == 'database' || contains(toJSON(github.event.commits.*.message), 'db') || contains(toJSON(github.event.commits.*.message), 'database'))"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load --input ${{ env.IMAGE_FILE_NAME }}

      - name: Execute Application Test Script
        run: |
          # Add your application-specific tests here.
          # For example, run the container and curl its health endpoint.
          echo "Running application-only tests..."
          # docker run -d --name my-app-test -p 8000:8000 ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.build.outputs.image_tag }}
          # sleep 5
          # curl --fail http://localhost:8000/health
          echo "Application test placeholder successful!"

  # ===============================================
  # Job 3: Push Image to ECR (Conditional)
  # ===============================================
  push-to-ecr:
    name: Push Image to ECR
    runs-on: ubuntu-latest
    needs: [build, integration-test-app]
    # Run if:
    # 1. The preceding jobs didn't fail (they were either successful or skipped).
    # 2. A commit message does NOT contain the word "skip".
    if: success() && !contains(toJSON(github.event.commits.*.message), 'skip')

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load --input ${{ env.IMAGE_FILE_NAME }}

      - name: Tag and Push image to Amazon ECR
        run: |
          IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }} --all-tags

  # ===============================================
  # Job 4: Update Kubernetes Manifest Repo (No changes)
  # ===============================================
  update-kubernetes-repo:
    name: Update Kubernetes Manifest
    runs-on: ubuntu-latest
    needs: [build, push-to-ecr]
    # This job will be skipped automatically if 'push-to-ecr' is skipped.
    steps:
      - name: Checkout Kubernetes repo
        uses: actions/checkout@v4
        with:
          repository: liormilliger/mywebsite-k8s
          token: ${{ secrets.GH_PAT }}
          ref: ${{ github.ref_name }}

      - name: Install yq
        run: sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

      - name: Update image tag in values.yaml
        run: |
          IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
          yq eval '.image.tag = "'"$IMAGE_TAG"'"' -i 'my-app-chart/values.yaml'

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git commit -am "Update image tag for mywebsite to ${{ needs.build.outputs.image_tag }}"
          git push