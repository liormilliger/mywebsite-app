name: Build, Test, and Push Docker Image to ECR

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 704505749045.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: mywebsite
  IMAGE_FILE_NAME: my-app-image.tar

jobs:
  # ===============================================
  # Job 1: Build the Docker Image
  # ===============================================
  build:
    name: Build Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.version.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define Image Version Tag
        id: version
        run: |
          VERSION="1.${{ github.run_number }}.0"
          echo "IMAGE_TAG=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.IMAGE_TAG }} .

      - name: Save Docker image as an artifact
        run: |
          docker save ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.IMAGE_TAG }} --output ${{ env.IMAGE_FILE_NAME }}
          
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ env.IMAGE_FILE_NAME }}

  # ===============================================
  # Job 2: Test the Docker Image
  # ===============================================
  test:
    name: Test Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load --input ${{ env.IMAGE_FILE_NAME }}

      - name: Run container locally and perform healthcheck
        run: |
          IMAGE_NAME=$(docker images --format '{{.Repository}}:{{.Tag}}' | head -n 1)
          docker run -d --name my-app-test -p 8080:5000 $IMAGE_NAME
          echo "Waiting for container to start..."
          sleep 15
          echo "Performing healthcheck..."
          curl --fail http://localhost:8080/ || exit 1
          echo "Healthcheck passed!"
          docker stop my-app-test

  # ===============================================
  # Job 3: Push the Image to ECR
  # ===============================================
  push:
    name: Push Image to ECR
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load --input ${{ env.IMAGE_FILE_NAME }}

      - name: Tag and Push image to Amazon ECR
        run: |
          IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }} --all-tags

  # ===============================================
  # Job 4: Update Kubernetes Manifest Repo
  # ===============================================
  update-kubernetes-repo:
    name: Update Kubernetes Manifest
    runs-on: ubuntu-latest
    needs: [build, push] # Runs after build (to get the tag) and push (to ensure image exists)

    steps:
      - name: Checkout Kubernetes repo
        uses: actions/checkout@v4
        with:
          repository: liormilliger/mywebsite-k8s
          token: ${{ secrets.GH_PAT }}

      - name: Install yq for YAML processing
        run: sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

      - name: Update image tag in values.yaml
        run: |
          IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
          # This command targets the .image.tag key in your specified values.yaml file
          yq eval '.image.tag = "'"$IMAGE_TAG"'"' -i 'my-app-chart/values.yaml'

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git commit -am "Update image tag for mywebsite to ${{ needs.build.outputs.image_tag }}"
          git push