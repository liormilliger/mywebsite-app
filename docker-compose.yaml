# docker-compose.yml

version: '3.8'

services:
  app:
    build: .
    container_name: mywebsite-app
    expose:
      - "5000"
    volumes:
      - ./app:/app
    # The app service will wait for the db service to be healthy before starting.
    depends_on:
      db:
        condition: service_healthy
    # Environment variables for the application to connect to the database.
    environment:
      - DATABASE_URL=postgresql://admin:password@db:5432/mywebsite

  nginx:
    image: nginx:latest
    container_name: mywebsite-nginx
    ports:
      - "80:80"
    volumes:
      # We ONLY need to mount the configuration file.
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app

  db:
    image: postgres:15-alpine
    container_name: mywebsite-db
    restart: always
    # Set the user, password, and database name for PostgreSQL.
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mywebsite
    ports:
      # Expose port 5432 to the host for local development access if needed.
      - "5432:5432"
    volumes:
      # This named volume will persist the database data.
      - postgres_data:/var/lib/postgresql/data
      # This mounts the SQL script to the initialization directory.
      # Any .sql files in this directory will be run on first start.
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d mywebsite"]
      interval: 10s
      timeout: 5s
      retries: 5

# Define the named volume for data persistence.
volumes:
  postgres_data:
